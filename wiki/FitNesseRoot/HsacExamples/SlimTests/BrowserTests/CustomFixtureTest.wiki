!1 Website testing using custom subclass of !-BrowserTest-!

On this page we test whether the City of Jane Doe is listed correctly on [[!-Practice Software Testing-!][https://v4.practicesoftwaretesting.com]].
We start by navigating to the profile page on !-PracticeSoftwareTesting-! and then perform the same check in different ways:
 * First with ''plain !-BrowserTest-!'' and a technical (xpath) selector,
 * then with a ''custom subclass, !-nl.hsac.fitnesse.sample.PracticeSoftwareTestingTest-!'', and
 * finally with a [[Slim scenario][.FitNesse.UserGuide.WritingAcceptanceTests.SliM.ScenarioTable]].
The latter two approaches both make the test (i.e. the script table containing the test) more descriptive, and less fragile to HTML changes.

Doing this in Java 'hides' the exact way the City is determined from the test (and its result). While a scenario would have made this part of the 'test domain'.
Hiding details can either be a good (e.g. more focus on what is relevant to test, smaller test report), or bad (e.g. 'what was done exactly in this method?') thing.
Which approach is more suitable depends on your tests' context (and the complexity of what is to be done)...

There are some things a Java method can do that a scenario cannot: for instance using conditional logic (''if'' statements), or looping (''for'' or ''while'' statements), or even customize the heuristic used to find places.

!2 Navigate to right page
Navigating to the right page is done only once (all subsequent test approaches use the same browser window, which will be at the correct location already).

!note We actually use a out-of-the-box custom subclass of !-BrowserTest-! to navigate to the correct page, since the web site uses Angular and we want to ensure the page is fully rendered before we start checking values.

|script|ng2 browser test                                       |
|open  |https://v4.practicesoftwaretesting.com                 |
|clear session storage                                         |
|click |Sign in                                                |
|enter |customer@practicesoftwaretesting.com|as  |Your E-mail  |
|enter |welcome01                           |as  |Your Password|
|click |Login                                                  |
|click |Profile                                                |
|check |value of                            |City|Vienna       |

The last row of the previous table shows there actually is no need to use a technical selector, nor a custom fixture, as the standard 'value of' method of !-BrowserTest-! is able to retrieve the value based on its label.
For the purpose of this example we shall retrieve the value using an xpath technical selector based on the !style_code(data-test) attribute of the inputs (notice the lower case 'city').

!2 Using !-BrowserTest-!

|script|browser test                                     |
|check |value of|xpath=//input[@data-test= 'city']|Vienna|

Using a custom subclass, makes the check look like...

!2 Using !-PracticeSoftwareTestingTest-!


We need to indicate in which package our custom class can be found.
|import                 |
|nl.hsac.fitnesse.sample|

|script|practice software testing test                                   |
|note  |Use custom method to retrieve current user's city                |
|check |city    |Vienna                                                  |
|note  |Using a customized heuristic, we can also retrieve similar fields|
|check |value of|city   |Vienna                                          |
|check |value of|country|Austria                                         |

And using a scenario

!2 Using a Scenario

The scenario 'hides' the xpath from the test script, but its definition can be found (and updated) in the wiki. And the test report/result will show what was done (unlike for the custom fixture).
No Java knowledge or development environment is needed to create and maintain a scenario, which may also be an advantage.

|scenario|check basic info value _ is _|key, expected                                   |
|check   |value of                     |xpath=//input[@data-test = '@{key}']|@{expected}|

|script                |browser test      |
|check basic info value|city   |is|Vienna |
|check basic info value|country|is|Austria|
